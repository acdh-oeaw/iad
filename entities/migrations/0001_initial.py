# Generated by Django 5.0.7 on 2024-07-17 13:52

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("idprovider", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AlternativeName",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Alternative Name", max_length=250
                    ),
                ),
            ],
            bases=("idprovider.idprovider",),
        ),
        migrations.CreateModel(
            name="Institution",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "written_name",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Written name"
                    ),
                ),
                (
                    "inst_alt_name",
                    models.CharField(
                        blank=True,
                        help_text="Use '; ' to separate many alterantive names.",
                        max_length=500,
                        verbose_name="Alternative Name(s) for this Institution",
                    ),
                ),
                (
                    "authority_url",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Authority url"
                    ),
                ),
                (
                    "adress",
                    models.CharField(
                        blank=True,
                        help_text="Adress of the research institution/museum.",
                        max_length=500,
                        verbose_name="Adress",
                    ),
                ),
                (
                    "contact",
                    models.CharField(
                        blank=True,
                        help_text="Contact (email) of the research institution/museum.",
                        max_length=200,
                        verbose_name="Contact",
                    ),
                ),
                (
                    "homepage",
                    models.CharField(
                        blank=True,
                        help_text="URL of the research institution/museum.",
                        max_length=200,
                        verbose_name="Homepage",
                    ),
                ),
                (
                    "abbreviation",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Abbreviation"
                    ),
                ),
                ("comment", models.TextField(blank=True, verbose_name="Comment")),
                (
                    "alt_names",
                    models.ManyToManyField(
                        blank=True,
                        max_length=250,
                        related_name="altname_of_inst",
                        to="entities.alternativename",
                        verbose_name="Alternative names",
                    ),
                ),
                (
                    "parent_institution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children_institutions",
                        to="entities.institution",
                        verbose_name="Parent institution",
                    ),
                ),
            ],
            bases=("idprovider.idprovider",),
        ),
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Normalized name", max_length=250
                    ),
                ),
                (
                    "geonames_id",
                    models.CharField(blank=True, help_text="GND-ID", max_length=50),
                ),
                (
                    "lat",
                    models.DecimalField(
                        blank=True, decimal_places=12, max_digits=20, null=True
                    ),
                ),
                (
                    "lng",
                    models.DecimalField(
                        blank=True, decimal_places=12, max_digits=20, null=True
                    ),
                ),
                (
                    "place_type",
                    models.CharField(
                        blank=True,
                        choices=[("city", "city"), ("country", "country")],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "alt_names",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Alternative names",
                        max_length=250,
                        related_name="altname_of_place",
                        to="entities.alternativename",
                    ),
                ),
                (
                    "part_of",
                    models.ForeignKey(
                        blank=True,
                        help_text="A place (country) this place is part of.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="has_child",
                        to="entities.place",
                    ),
                ),
            ],
            bases=("idprovider.idprovider",),
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "written_name",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Written name"
                    ),
                ),
                (
                    "forename",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Forename"
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=300, verbose_name="Name"),
                ),
                (
                    "pers_alt_name",
                    models.CharField(
                        blank=True,
                        help_text="Use '; ' to separate many alterantive names.",
                        max_length=500,
                        verbose_name="Alternative Name(s) for this Person",
                    ),
                ),
                (
                    "acad_title",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Academic title"
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="YYYY-MM-DD",
                        null=True,
                        verbose_name="Date of Birth",
                    ),
                ),
                (
                    "authority_url",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Authority url"
                    ),
                ),
                ("comment", models.TextField(blank=True, verbose_name="Comment")),
                (
                    "public",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Should this entry (and all related entries) be public        or only visible to the account holders? Can be made public        only after data-check was completed.",
                        verbose_name="Public",
                    ),
                ),
                (
                    "alt_names",
                    models.ManyToManyField(
                        blank=True,
                        max_length=250,
                        related_name="altname_of_persons",
                        to="entities.alternativename",
                        verbose_name="Alternative names",
                    ),
                ),
                (
                    "belongs_to_institution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="has_member",
                        to="entities.institution",
                        verbose_name="Belongs to institution",
                    ),
                ),
                (
                    "place_of_birth",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="is_birthplace",
                        to="entities.place",
                        verbose_name="Place of Birth",
                    ),
                ),
            ],
            options={
                "verbose_name": "Researcher",
            },
            bases=("idprovider.idprovider",),
        ),
        migrations.AddField(
            model_name="institution",
            name="location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="entities.place",
                verbose_name="Location",
            ),
        ),
    ]
