# Generated by Django 5.0.7 on 2024-07-17 13:52

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.ranges
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("bib", "0001_initial"),
        ("entities", "0001_initial"),
        ("idprovider", "0001_initial"),
        ("shapes", "0001_initial"),
        ("vocabs", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AltName",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True, max_length=250, null=True, verbose_name="A name tag"
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True, max_length=3, null=True, verbose_name="ISO639"
                    ),
                ),
            ],
            bases=("idprovider.idprovider",),
        ),
        migrations.CreateModel(
            name="ResearchQuestion",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "question",
                    models.TextField(
                        blank=True, null=True, verbose_name="research question"
                    ),
                ),
            ],
            options={
                "verbose_name": "Research Question",
                "ordering": ["pk"],
            },
            bases=("idprovider.idprovider",),
        ),
        migrations.CreateModel(
            name="Period",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        blank=True, max_length=250, null=True, verbose_name="Identifier"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="The name of the period (e.g. Iron Age, Early Iron Age, Hallstatt Aâ€¦).",
                        max_length=250,
                        null=True,
                        verbose_name="The objects name",
                    ),
                ),
                (
                    "alt_id",
                    models.CharField(
                        blank=True,
                        help_text="Any other official identifier of this entity.",
                        max_length=250,
                        null=True,
                        verbose_name="Alternative ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description of the object."
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Any noteworthy general information about the object\n        that cannot be expressed in other fields.",
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Should this entry (and all related entries) be public        or only visible to the account holders? Can be made public        only after data-check was completed.",
                        verbose_name="Public",
                    ),
                ),
                (
                    "polygon",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "polygon_proxy",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Please set to 'Yes' in case the polygon is merely a place holder",
                        verbose_name="No precise polygon",
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "start_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Must be a number!",
                        null=True,
                        verbose_name="Earliest beginning of the period (BC).",
                    ),
                ),
                (
                    "start_date_latest",
                    models.IntegerField(
                        blank=True,
                        help_text="Must be a number!",
                        null=True,
                        verbose_name="Latest beginning of the period (BC).",
                    ),
                ),
                (
                    "end_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Must be a number!",
                        null=True,
                        verbose_name="Earliest end of the period (BC).",
                    ),
                ),
                (
                    "end_date_latest",
                    models.IntegerField(
                        blank=True,
                        help_text="Must be a number!",
                        null=True,
                        verbose_name="Latest end of the period (BC).",
                    ),
                ),
                (
                    "norm_id",
                    models.CharField(
                        blank=True, max_length=250, null=True, verbose_name="PeriodO"
                    ),
                ),
                (
                    "bibl",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Bibliographic source for this period.",
                    ),
                ),
                (
                    "alt_name",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Another name of the site (another spelling, language, alias name etc.).",
                        to="archiv.altname",
                        verbose_name="Alternative Name",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        help_text="Country in which this period is used in.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="has_related_period_country",
                        to="entities.place",
                        verbose_name="Country in which this period is used in.",
                    ),
                ),
                (
                    "literature",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Add publication references",
                        to="bib.reference",
                        verbose_name="Literature",
                    ),
                ),
                (
                    "region",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Region in which this period is used in.",
                        related_name="has_related_period_region",
                        to="entities.place",
                        verbose_name="Region in which this period is used in.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Chronology",
                "ordering": ["pk"],
            },
            bases=("idprovider.idprovider",),
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        blank=True, max_length=250, null=True, verbose_name="Identifier"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="The name of the site in the language of        the country where the site is located.",
                        max_length=250,
                        null=True,
                        verbose_name="The objects name",
                    ),
                ),
                (
                    "alt_id",
                    models.CharField(
                        blank=True,
                        help_text="Any other official identifier of this entity.",
                        max_length=250,
                        null=True,
                        verbose_name="Alternative ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the whole site.",
                        null=True,
                        verbose_name="Description of the object.",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Any noteworthy general information about the object\n        that cannot be expressed in other fields.",
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Should this entry (and all related entries) be public        or only visible to the account holders? Can be made public        only after data-check was completed.",
                        verbose_name="Public",
                    ),
                ),
                (
                    "polygon",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "polygon_proxy",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Please set to 'Yes' in case the polygon is merely a place holder",
                        verbose_name="No precise polygon",
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "sm_adm",
                    models.TextField(
                        blank=True,
                        help_text="Smallest Administrative Unit.",
                        verbose_name="Smallest Administrative Unit",
                    ),
                ),
                (
                    "cadastral_number",
                    models.CharField(
                        blank=True,
                        help_text="The cadastral number.",
                        max_length=250,
                        null=True,
                        verbose_name="Cadastral Number (will be moved to Place-Class)",
                    ),
                ),
                (
                    "heritage_number",
                    models.CharField(
                        blank=True,
                        help_text="The heritage register number.",
                        max_length=250,
                        null=True,
                        verbose_name="Heritage Register Number",
                    ),
                ),
                (
                    "plot_number",
                    models.CharField(
                        blank=True,
                        help_text="The plot number (applies to Slovenian sites).",
                        max_length=250,
                        null=True,
                        verbose_name="Plot Number",
                    ),
                ),
                (
                    "ownership",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 â€“ private", "1 â€“ private"),
                            ("2 â€“ public", "2 â€“ public"),
                            ("3 â€“ private/public", "3 â€“ private/public"),
                            (
                                "4 â€“ information not available",
                                "4 â€“ information not available",
                            ),
                        ],
                        help_text="Ownership of the land, where the site is located.",
                        max_length=250,
                        null=True,
                        verbose_name="Ownership",
                    ),
                ),
                (
                    "accessibility",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "1 â€“ accessible by public transport",
                                "1 â€“ accessible by public transport",
                            ),
                            (
                                "2 â€“ accessible for individual tourist groups",
                                "2 â€“ accessible for individual tourist groups",
                            ),
                            ("3 â€“ inaccessible", "3 â€“ inaccessible "),
                            (
                                "4 â€“ information not available",
                                "4 â€“ information not available",
                            ),
                        ],
                        help_text="Transportation types available on the site.",
                        max_length=250,
                        null=True,
                        verbose_name="Accessibility",
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "1 â€“ reconstructed and interpreted onsite",
                                "1 â€“ reconstructed and interpreted onsite",
                            ),
                            (
                                "2 â€“ visible, but not interpreted",
                                "2 â€“ visible, but not interpreted",
                            ),
                            (
                                "3 - invisible archaeological heritage",
                                "3 - invisible archaeological heritage",
                            ),
                            (
                                "4 â€“ information not available",
                                "4 â€“ information not available",
                            ),
                        ],
                        help_text="How visible are the remains on site.",
                        max_length=250,
                        null=True,
                        verbose_name="Visibility",
                    ),
                ),
                (
                    "infrastructure",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "1 â€“ complete infrastructure",
                                "1 â€“ complete infrastructure",
                            ),
                            ("2 â€“ basic infrastructure", "2 â€“ basic infrastructure"),
                            ("3 â€“ no infrastructure", "3 â€“ no infrastructure"),
                            (
                                "4 â€“ information not available",
                                "4 â€“ information not available",
                            ),
                        ],
                        help_text="What kind of infrastructure is available in the vicinity of the site        (restaurants, parking, etc.)",
                        max_length=250,
                        null=True,
                        verbose_name="Infrastructure",
                    ),
                ),
                (
                    "long_term_management",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "1 â€“ long-term care ensured",
                                "1 â€“ long-term care ensured",
                            ),
                            (
                                "2 â€“ short-term care ensured",
                                "2 â€“ short-term care ensured",
                            ),
                            (
                                "3 â€“ no care foreseen or possible",
                                "3 â€“ no care foreseen or possible",
                            ),
                            (
                                "4 â€“ information not available",
                                "4 â€“ information not available",
                            ),
                        ],
                        help_text="What kind of management of the site is foreseen?",
                        max_length=250,
                        null=True,
                        verbose_name="Long-Term Management",
                    ),
                ),
                (
                    "potential_surrounding",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "1 â€“ touristic region with excellent infrastructure",
                                "1 â€“ touristic region with excellent infrastructure",
                            ),
                            (
                                "2 â€“ touristic offer in development",
                                "2 â€“ touristic offer in development",
                            ),
                            (
                                "3 â€“ no or little attempts for tourism",
                                "3 â€“ no or little attempts for tourism",
                            ),
                            (
                                "4 â€“ information not available",
                                "4 â€“ information not available",
                            ),
                        ],
                        help_text="How well is the region where the site is located visited by tourists?        What is the potential of other touristic attractions in the vicinity?",
                        max_length=250,
                        null=True,
                        verbose_name="Potential of the Surroundings",
                    ),
                ),
                (
                    "iad_app",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Should this site be used in the IAD-App?",
                        verbose_name="App",
                    ),
                ),
                (
                    "app_description",
                    models.TextField(
                        blank=True,
                        help_text="If the site is going to be used in the IAD app, please provide the         description of the site to be implemented into the app.",
                        null=True,
                        verbose_name="App Description",
                    ),
                ),
                (
                    "tourism_comment",
                    models.TextField(
                        blank=True,
                        help_text="Any noteworthy information about the touristic potential of the site that         has not been expressed in other fields.",
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "site_start_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Calculated automatically",
                        null=True,
                        verbose_name="Earliest related Archaeological Entity",
                    ),
                ),
                (
                    "site_end_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Calculated automatically",
                        null=True,
                        verbose_name="Latest related Archaeological Entity",
                    ),
                ),
                (
                    "temp_extent",
                    django.contrib.postgres.fields.ranges.IntegerRangeField(
                        blank=True, null=True
                    ),
                ),
                (
                    "alt_name",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Another name of the site (another spelling, language, alias name etc.).",
                        to="archiv.altname",
                        verbose_name="Alternative Name",
                    ),
                ),
                (
                    "cadastral_community",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The municipality where the site is located.",
                        related_name="has_sites",
                        to="shapes.municipality",
                        verbose_name="Municipality",
                    ),
                ),
                (
                    "literature",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Add publication references",
                        to="bib.reference",
                        verbose_name="Literature",
                    ),
                ),
                (
                    "museum",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Where are the finds from the site stored?",
                        related_name="is_museum",
                        to="entities.institution",
                        verbose_name="Museum",
                    ),
                ),
                (
                    "other_period",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Other periods that were recorded on the site.",
                        related_name="has_other_period",
                        to="vocabs.skosconcept",
                        verbose_name="Other Present Periods",
                    ),
                ),
                (
                    "site_checked_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who and when checked the entered data (The 'when' is stored automatically).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="site_checked_by_user",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Checked by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Site",
                "ordering": ["pk"],
            },
            bases=("idprovider.idprovider",),
        ),
        migrations.CreateModel(
            name="ResearchEvent",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        blank=True,
                        help_text="Applies to Austrian sites.",
                        max_length=250,
                        null=True,
                        verbose_name="Identifier",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="The objects name",
                    ),
                ),
                (
                    "alt_id",
                    models.CharField(
                        blank=True,
                        help_text="Any other official identifier of this entity.",
                        max_length=250,
                        null=True,
                        verbose_name="Alternative ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description of the object."
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Any noteworthy general information about the object\n        that cannot be expressed in other fields.",
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Should this entry (and all related entries) be public        or only visible to the account holders? Can be made public        only after data-check was completed.",
                        verbose_name="Public",
                    ),
                ),
                (
                    "polygon",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "polygon_proxy",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Please set to 'Yes' in case the polygon is merely a place holder",
                        verbose_name="No precise polygon",
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "legacy_research_id",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="When did the research activity start? (YYYY-MM-DD)",
                        null=True,
                        verbose_name="Start Date.",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="When did the research activity end? (YYYY-MM-DD)",
                        null=True,
                        verbose_name="End Date.",
                    ),
                ),
                (
                    "generation_data_set",
                    models.DateField(
                        blank=True,
                        help_text="provide some (YYYY-MM-DD)",
                        null=True,
                        verbose_name="When was the data-set generated?",
                    ),
                ),
                (
                    "alt_name",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Another name of the site (another spelling, language, alias name etc.).",
                        to="archiv.altname",
                        verbose_name="Alternative Name",
                    ),
                ),
                (
                    "literature",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Add publication references",
                        to="bib.reference",
                        verbose_name="Literature",
                    ),
                ),
                (
                    "research_method",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Which method has been applied?",
                        related_name="is_research_method_of",
                        to="vocabs.skosconcept",
                        verbose_name="Research Methods",
                    ),
                ),
                (
                    "research_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Was it a development led research or scientific research?",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="is_research_type_of",
                        to="vocabs.skosconcept",
                        verbose_name="Research Type",
                    ),
                ),
                (
                    "responsible_institution",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Which institution conducted the research?",
                        related_name="has_research",
                        to="entities.institution",
                        verbose_name="Responsible Institution",
                    ),
                ),
                (
                    "responsible_researcher",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Who is the responsible researcher/project leader of the conducted research?",
                        related_name="has_research",
                        to="entities.person",
                        verbose_name="Responsible Researcher",
                    ),
                ),
                (
                    "research_question",
                    models.ForeignKey(
                        blank=True,
                        help_text="What was the initial research question to be answered        with the conducted research methods? Only for scientific research.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="is_research_question_of",
                        to="archiv.researchquestion",
                        verbose_name="Research Question",
                    ),
                ),
                (
                    "site_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of related sites.",
                        related_name="has_research_activity",
                        to="archiv.site",
                        verbose_name="Related Sites",
                    ),
                ),
            ],
            options={
                "verbose_name": "Research Activity",
                "verbose_name_plural": "Research Activities",
                "ordering": ["pk"],
            },
            bases=("idprovider.idprovider",),
        ),
        migrations.CreateModel(
            name="MonumentProtection",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        blank=True, max_length=250, null=True, verbose_name="Identifier"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="The objects name",
                    ),
                ),
                (
                    "alt_id",
                    models.CharField(
                        blank=True,
                        help_text="Any other official identifier of this entity.",
                        max_length=250,
                        null=True,
                        verbose_name="Alternative ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description of the object."
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Any noteworthy information about the protection    of the site that has not been expressed in other fields. (other types ).",
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Should this entry (and all related entries) be public        or only visible to the account holders? Can be made public        only after data-check was completed.",
                        verbose_name="Public",
                    ),
                ),
                (
                    "polygon",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "polygon_proxy",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Please set to 'Yes' in case the polygon is merely a place holder",
                        verbose_name="No precise polygon",
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "heritage_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("yes", "yes"),
                            ("no", "no"),
                            ("partially", "partially"),
                            ("in process", "in process"),
                        ],
                        help_text="Has the site status of cultural heritage?",
                        max_length=250,
                        null=True,
                        verbose_name="Cultural Heritage Status",
                    ),
                ),
                (
                    "natural_heritage_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("yes", "yes"),
                            ("no", "no"),
                            ("partially", "partially"),
                            ("in process", "in process"),
                        ],
                        help_text="Has the site status of natural heritage?",
                        max_length=250,
                        null=True,
                        verbose_name="Natural Heritage Status",
                    ),
                ),
                (
                    "alt_name",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Another name of the site (another spelling, language, alias name etc.).",
                        to="archiv.altname",
                        verbose_name="Alternative Name",
                    ),
                ),
                (
                    "current_land_use",
                    models.ManyToManyField(
                        blank=True,
                        help_text="What activities are currently present at the site location?",
                        related_name="monument_protection_current_land_use",
                        to="vocabs.skosconcept",
                        verbose_name="Current Land Use",
                    ),
                ),
                (
                    "literature",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Add publication references",
                        to="bib.reference",
                        verbose_name="Literature",
                    ),
                ),
                (
                    "threats",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Which activity is threatening the site?",
                        related_name="monument_protection_threats",
                        to="vocabs.skosconcept",
                        verbose_name="Threats",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="The unique identifier of the site.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="has_monument_protection",
                        to="archiv.site",
                        verbose_name="Site Name",
                    ),
                ),
            ],
            options={
                "verbose_name": "Monument Protection",
                "ordering": ["pk"],
            },
            bases=("idprovider.idprovider",),
        ),
        migrations.CreateModel(
            name="ArchEnt",
            fields=[
                (
                    "idprovider_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="idprovider.idprovider",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        blank=True, max_length=250, null=True, verbose_name="Identifier"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="The name of the entity in the language        of the country where the entity is located.",
                        max_length=250,
                        null=True,
                        verbose_name="The objects name",
                    ),
                ),
                (
                    "alt_id",
                    models.CharField(
                        blank=True,
                        help_text="Any other official identifier of this entity.",
                        max_length=250,
                        null=True,
                        verbose_name="Alternative ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description of the object."
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Any noteworthy general information about the object\n        that cannot be expressed in other fields.",
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Should this entry (and all related entries) be public        or only visible to the account holders? Can be made public        only after data-check was completed.",
                        verbose_name="Public",
                    ),
                ),
                (
                    "polygon",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "polygon_proxy",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Please set to 'Yes' in case the polygon is merely a place holder",
                        verbose_name="No precise polygon",
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "type_certainty",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "1 - high: data from more complementary methods and/or with relevant comparisons",
                                "1 - high: data from more complementary methods and/or with relevant comparisons",
                            ),
                            (
                                "2 - basic: data from only one method and without relevant comparisons",
                                "2 - basic: data from only one method and without relevant comparisons",
                            ),
                            (
                                "3 - low: not certain data from old finds or old not-verifiable sources",
                                "3 - low: not certain data from old finds or old not-verifiable sources",
                            ),
                        ],
                        help_text="How certain is the interpretation of the arch. entity type",
                        max_length=250,
                        null=True,
                        verbose_name="Entity Type Certainty",
                    ),
                ),
                (
                    "dating_certainty",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "1 - high: data from more complementary methods and/or with relevant comparisons",
                                "1 - high: data from more complementary methods and/or with relevant comparisons",
                            ),
                            (
                                "2 - basic: data from only one method and without relevant comparisons",
                                "2 - basic: data from only one method and without relevant comparisons",
                            ),
                            (
                                "3 - low: not certain data from old finds or old not-verifiable sources",
                                "3 - low: not certain data from old finds or old not-verifiable sources",
                            ),
                        ],
                        help_text="How reliable is the dating of the archaeological entity?",
                        max_length=250,
                        null=True,
                        verbose_name="Dating Certainty",
                    ),
                ),
                (
                    "location_certainty",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "1 - high: data from more complementary methods and/or with relevant comparisons",
                                "1 - high: data from more complementary methods and/or with relevant comparisons",
                            ),
                            (
                                "2 - basic: data from only one method and without relevant comparisons",
                                "2 - basic: data from only one method and without relevant comparisons",
                            ),
                            (
                                "3 - low: not certain data from old finds or old not-verifiable sources",
                                "3 - low: not certain data from old finds or old not-verifiable sources",
                            ),
                        ],
                        help_text="How accurate is the information on the location of the arch. entity",
                        max_length=250,
                        null=True,
                        verbose_name="Location Certainty",
                    ),
                ),
                (
                    "alt_name",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Another name / Other names of the entity        (another spelling, language, alias name etc.)",
                        to="archiv.altname",
                        verbose_name="Alternative Name",
                    ),
                ),
                (
                    "burial_construction",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Provide some helptext",
                        related_name="burial_construction_related",
                        to="vocabs.skosconcept",
                        verbose_name="Burial Construction",
                    ),
                ),
                (
                    "burial_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Provide some helptext",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="burial_type_related",
                        to="vocabs.skosconcept",
                        verbose_name="Burial Type",
                    ),
                ),
                (
                    "ent_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="What type of area is it?",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="archent_type_related",
                        to="vocabs.skosconcept",
                        verbose_name="Entity Type",
                    ),
                ),
                (
                    "literature",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Add publication references",
                        to="bib.reference",
                        verbose_name="Literature",
                    ),
                ),
                (
                    "settlement_fortification",
                    models.ManyToManyField(
                        blank=True,
                        help_text="If 'settlement' is the entity type, specify the type of fortification.",
                        related_name="settlement_fortification_related",
                        to="vocabs.skosconcept",
                        verbose_name="Settlement Fortification",
                    ),
                ),
                (
                    "settlement_occupation",
                    models.ForeignKey(
                        blank=True,
                        help_text="If 'settlement' is the entity type, specify the type of occupation.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="settlement_occupation_related",
                        to="vocabs.skosconcept",
                        verbose_name="Settlement Occupation",
                    ),
                ),
                (
                    "topography",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Where is the entity located",
                        related_name="archent_topography",
                        to="vocabs.skosconcept",
                        verbose_name="Topography",
                    ),
                ),
                (
                    "period",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Dating of the archaeological entity.",
                        related_name="has_archents",
                        to="archiv.period",
                        verbose_name="Dating",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="The unique identifier of the site.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="has_archent",
                        to="archiv.site",
                        verbose_name="Site Name",
                    ),
                ),
            ],
            options={
                "verbose_name": "Archaeological Entity",
                "ordering": ["pk"],
            },
            bases=("idprovider.idprovider",),
        ),
    ]
